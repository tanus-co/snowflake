// Code generated by protoc-gen-go. DO NOT EDIT.
// source: snowflake_worker.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SnowflakeRequest struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnowflakeRequest) Reset()         { *m = SnowflakeRequest{} }
func (m *SnowflakeRequest) String() string { return proto.CompactTextString(m) }
func (*SnowflakeRequest) ProtoMessage()    {}
func (*SnowflakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd36c29d56b3439c, []int{0}
}

func (m *SnowflakeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnowflakeRequest.Unmarshal(m, b)
}
func (m *SnowflakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnowflakeRequest.Marshal(b, m, deterministic)
}
func (m *SnowflakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnowflakeRequest.Merge(m, src)
}
func (m *SnowflakeRequest) XXX_Size() int {
	return xxx_messageInfo_SnowflakeRequest.Size(m)
}
func (m *SnowflakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SnowflakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SnowflakeRequest proto.InternalMessageInfo

func (m *SnowflakeRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type SnowflakeResponse struct {
	Ids                  []int64  `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnowflakeResponse) Reset()         { *m = SnowflakeResponse{} }
func (m *SnowflakeResponse) String() string { return proto.CompactTextString(m) }
func (*SnowflakeResponse) ProtoMessage()    {}
func (*SnowflakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd36c29d56b3439c, []int{1}
}

func (m *SnowflakeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnowflakeResponse.Unmarshal(m, b)
}
func (m *SnowflakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnowflakeResponse.Marshal(b, m, deterministic)
}
func (m *SnowflakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnowflakeResponse.Merge(m, src)
}
func (m *SnowflakeResponse) XXX_Size() int {
	return xxx_messageInfo_SnowflakeResponse.Size(m)
}
func (m *SnowflakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SnowflakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SnowflakeResponse proto.InternalMessageInfo

func (m *SnowflakeResponse) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func init() {
	proto.RegisterType((*SnowflakeRequest)(nil), "proto.SnowflakeRequest")
	proto.RegisterType((*SnowflakeResponse)(nil), "proto.SnowflakeResponse")
}

func init() { proto.RegisterFile("snowflake_worker.proto", fileDescriptor_bd36c29d56b3439c) }

var fileDescriptor_bd36c29d56b3439c = []byte{
	// 159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0xce, 0xcb, 0x2f,
	0x4f, 0xcb, 0x49, 0xcc, 0x4e, 0x8d, 0x2f, 0xcf, 0x2f, 0xca, 0x4e, 0x2d, 0xd2, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x1a, 0x5c, 0x02, 0xc1, 0x30, 0x05, 0x41, 0xa9, 0x85,
	0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x22, 0x5c, 0xac, 0xc9, 0xf9, 0xa5, 0x79, 0x25, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0xac, 0x41, 0x10, 0x8e, 0x92, 0x2a, 0x97, 0x20, 0x92, 0xca, 0xe2, 0x82, 0xfc, 0xbc,
	0xe2, 0x54, 0x21, 0x01, 0x2e, 0xe6, 0xcc, 0x94, 0x62, 0x09, 0x46, 0x05, 0x66, 0x0d, 0xe6, 0x20,
	0x10, 0xd3, 0xc8, 0x9d, 0x8b, 0xdd, 0xbd, 0x28, 0x35, 0xb5, 0x24, 0xb5, 0x48, 0xc8, 0x86, 0x8b,
	0xd5, 0x3d, 0xb5, 0xc4, 0x33, 0x45, 0x48, 0x1c, 0x62, 0xa7, 0x1e, 0xba, 0x4d, 0x52, 0x12, 0x98,
	0x12, 0x10, 0x83, 0x95, 0x18, 0x9c, 0x78, 0x16, 0x31, 0x71, 0xc2, 0xc5, 0x93, 0xd8, 0xc0, 0x0a,
	0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x96, 0x83, 0x89, 0x33, 0xcf, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterClient interface {
	GetId(ctx context.Context, in *SnowflakeRequest, opts ...grpc.CallOption) (*SnowflakeResponse, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) GetId(ctx context.Context, in *SnowflakeRequest, opts ...grpc.CallOption) (*SnowflakeResponse, error) {
	out := new(SnowflakeResponse)
	err := c.cc.Invoke(ctx, "/proto.Greeter/GetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
type GreeterServer interface {
	GetId(context.Context, *SnowflakeRequest) (*SnowflakeResponse, error)
}

// UnimplementedGreeterServer can be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (*UnimplementedGreeterServer) GetId(ctx context.Context, req *SnowflakeRequest) (*SnowflakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetId not implemented")
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_GetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnowflakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Greeter/GetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetId(ctx, req.(*SnowflakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetId",
			Handler:    _Greeter_GetId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snowflake_worker.proto",
}
